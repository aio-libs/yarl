---

name: Build wheel

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      dists-artifact-name:
        description: Workflow artifact name containing dists
        required: true
        type: string
      check-name:
        description: A custom name for the Checks API-reported status
        required: false
        type: string
      cython-tracing:
        description: Whether to build Cython modules with line tracing
        default: '0'
        required: false
        type: string
      qemu:
        description: Emulated QEMU architecture
        default: ''
        required: false
        type: string
      runner-vm-os:
        description: VM OS to use
        default: ubuntu-latest
        required: false
        type: string
      source-tarball-name:
        description: Sdist filename wildcard
        required: true
        type: string
      timeout-minutes:
        description: Deadline for the job to complete
        required: true
        type: number
      wheel-tags-to-skip:
        description: Wheel tags to skip building
        default: ''
        required: false
        type: string

env:
  FORCE_COLOR: "1"  # Make tools pretty.
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:

  build-wheel:
    name: >-
      ${{
        inputs.check-name
        && inputs.check-name
        || format(
          'Build wheels on {0} {1}',
          inputs.runner-vm-os,
          inputs.qemu
        )
      }}
    runs-on: ${{ inputs.runner-vm-os }}
    timeout-minutes: ${{ fromJSON(inputs.timeout-minutes) }}
    steps:
    - name: Compute GHA artifact name ending
      id: gha-artifact-name
      run: |
        from hashlib import sha512
        from os import environ
        from pathlib import Path

        FILE_APPEND_MODE = 'a'

        inputs_json_str = """${{ toJSON(inputs) }}"""

        hash = sha512(inputs_json_str.encode()).hexdigest()

        with Path(environ['GITHUB_OUTPUT']).open(
                mode=FILE_APPEND_MODE,
        ) as outputs_file:
            print(f'hash={hash}', file=outputs_file)
      shell: python

    - name: Retrieve the project source from an sdist inside the GHA artifact
      uses: re-actors/checkout-python-sdist@release/v2
      with:
        source-tarball-name: ${{ inputs.source-tarball-name }}
        workflow-artifact-name: ${{ inputs.dists-artifact-name }}

    - name: Set up QEMU
      if: inputs.qemu
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
        # This should be temporary
        # xref https://github.com/docker/setup-qemu-action/issues/188
        # xref https://github.com/tonistiigi/binfmt/issues/215
        image: tonistiigi/binfmt:qemu-v8.1.5
      id: qemu
    - name: Prepare emulation
      if: inputs.qemu
      run: |
        # Build emulated architectures only if QEMU is set,
        # use default "auto" otherwise
        echo "CIBW_ARCHS_LINUX=${{ inputs.qemu }}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Skip building some wheel tags
      if: inputs.wheel-tags-to-skip
      run: |
        echo "CIBW_SKIP=${{ inputs.wheel-tags-to-skip }}" >> "${GITHUB_ENV}"
      shell: bash

    - name: Build wheels
      uses: pypa/cibuildwheel@v3.0.0
      env:
        CIBW_ARCHS_MACOS: x86_64 arm64 universal2
        CIBW_CONFIG_SETTINGS: >-  # Cython line tracing for coverage collection
          pure-python=false
          with-cython-tracing=${{ inputs.cython-tracing }}

    - name: Upload built artifacts for testing and publishing
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.dists-artifact-name }}-
          ${{ inputs.runner-vm-os }}-
          ${{ inputs.qemu }}-
          ${{ steps.gha-artifact-name.outputs.hash }}
        path: ./wheelhouse/*.whl

...
